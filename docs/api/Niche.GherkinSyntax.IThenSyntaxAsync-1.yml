### YamlMime:ManagedReference
items:
- uid: Niche.GherkinSyntax.IThenSyntaxAsync`1
  commentId: T:Niche.GherkinSyntax.IThenSyntaxAsync`1
  id: IThenSyntaxAsync`1
  parent: Niche.GherkinSyntax
  children:
  - Niche.GherkinSyntax.IThenSyntaxAsync`1.AndAsync(System.Func{`0,System.Threading.Tasks.Task})
  langs:
  - csharp
  - vb
  name: IThenSyntaxAsync<C>
  nameWithType: IThenSyntaxAsync<C>
  fullName: Niche.GherkinSyntax.IThenSyntaxAsync<C>
  type: Interface
  source:
    remote:
      path: src/Niche.GherkinSyntax/IThenSyntaxAsync.cs
      branch: feature/api-documentation
      repo: https://github.com/theunrepentantgeek/Niche.GherkinSyntax.git
    id: IThenSyntaxAsync
    path: ../src/Niche.GherkinSyntax/IThenSyntaxAsync.cs
    startLine: 9
  assemblies:
  - Niche.GherkinSyntax
  namespace: Niche.GherkinSyntax
  summary: "\nDefines asynchronous the syntax available after &apos;Then&apos;\n"
  example: []
  syntax:
    content: public interface IThenSyntaxAsync<C>
    typeParameters:
    - id: C
      description: Type of context available for verification actions.
    content.vb: Public Interface IThenSyntaxAsync(Of C)
  nameWithType.vb: IThenSyntaxAsync(Of C)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Niche.GherkinSyntax.IThenSyntaxAsync(Of C)
  name.vb: IThenSyntaxAsync(Of C)
- uid: Niche.GherkinSyntax.IThenSyntaxAsync`1.AndAsync(System.Func{`0,System.Threading.Tasks.Task})
  commentId: M:Niche.GherkinSyntax.IThenSyntaxAsync`1.AndAsync(System.Func{`0,System.Threading.Tasks.Task})
  id: AndAsync(System.Func{`0,System.Threading.Tasks.Task})
  parent: Niche.GherkinSyntax.IThenSyntaxAsync`1
  langs:
  - csharp
  - vb
  name: AndAsync(Func<C, Task>)
  nameWithType: IThenSyntaxAsync<C>.AndAsync(Func<C, Task>)
  fullName: Niche.GherkinSyntax.IThenSyntaxAsync<C>.AndAsync(System.Func<C, System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/Niche.GherkinSyntax/IThenSyntaxAsync.cs
      branch: feature/api-documentation
      repo: https://github.com/theunrepentantgeek/Niche.GherkinSyntax.git
    id: AndAsync
    path: ../src/Niche.GherkinSyntax/IThenSyntaxAsync.cs
    startLine: 16
  assemblies:
  - Niche.GherkinSyntax
  namespace: Niche.GherkinSyntax
  summary: "\nApply another action to our context to verify the state\n"
  example: []
  syntax:
    content: Task<IThenSyntaxAsync<C>> AndAsync(Func<C, Task> action)
    parameters:
    - id: action
      type: System.Func{{C},System.Threading.Tasks.Task}
      description: An action to verify state.
    return:
      type: System.Threading.Tasks.Task{Niche.GherkinSyntax.IThenSyntaxAsync`1}
      description: A syntax implementation for method chaining.
    content.vb: Function AndAsync(action As Func(Of C, Task)) As Task(Of IThenSyntaxAsync(Of C))
  overload: Niche.GherkinSyntax.IThenSyntaxAsync`1.AndAsync*
  nameWithType.vb: IThenSyntaxAsync(Of C).AndAsync(Func(Of C, Task))
  fullName.vb: Niche.GherkinSyntax.IThenSyntaxAsync(Of C).AndAsync(System.Func(Of C, System.Threading.Tasks.Task))
  name.vb: AndAsync(Func(Of C, Task))
references:
- uid: Niche.GherkinSyntax
  commentId: N:Niche.GherkinSyntax
  name: Niche.GherkinSyntax
  nameWithType: Niche.GherkinSyntax
  fullName: Niche.GherkinSyntax
- uid: Niche.GherkinSyntax.IThenSyntaxAsync`1.AndAsync*
  commentId: Overload:Niche.GherkinSyntax.IThenSyntaxAsync`1.AndAsync
  name: AndAsync
  nameWithType: IThenSyntaxAsync<C>.AndAsync
  fullName: Niche.GherkinSyntax.IThenSyntaxAsync<C>.AndAsync
  nameWithType.vb: IThenSyntaxAsync(Of C).AndAsync
  fullName.vb: Niche.GherkinSyntax.IThenSyntaxAsync(Of C).AndAsync
- uid: System.Func{{C},System.Threading.Tasks.Task}
  commentId: T:System.Func{`0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<C, Task>
  nameWithType: Func<C, Task>
  fullName: System.Func<C, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of C, Task)
  fullName.vb: System.Func(Of C, System.Threading.Tasks.Task)
  name.vb: Func(Of C, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Niche.GherkinSyntax.IThenSyntaxAsync`1}
  commentId: T:System.Threading.Tasks.Task{Niche.GherkinSyntax.IThenSyntaxAsync`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IThenSyntaxAsync<C>>
  nameWithType: Task<IThenSyntaxAsync<C>>
  fullName: System.Threading.Tasks.Task<Niche.GherkinSyntax.IThenSyntaxAsync<C>>
  nameWithType.vb: Task(Of IThenSyntaxAsync(Of C))
  fullName.vb: System.Threading.Tasks.Task(Of Niche.GherkinSyntax.IThenSyntaxAsync(Of C))
  name.vb: Task(Of IThenSyntaxAsync(Of C))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Niche.GherkinSyntax.IThenSyntaxAsync`1
    name: IThenSyntaxAsync
    nameWithType: IThenSyntaxAsync
    fullName: Niche.GherkinSyntax.IThenSyntaxAsync
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Niche.GherkinSyntax.IThenSyntaxAsync`1
    name: IThenSyntaxAsync
    nameWithType: IThenSyntaxAsync
    fullName: Niche.GherkinSyntax.IThenSyntaxAsync
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
